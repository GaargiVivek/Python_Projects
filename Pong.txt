# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
paddle1_pos = 150
paddle2_pos = 150
paddle1_vel = 0
paddle2_vel = 0

ball_pos = [WIDTH/2,HEIGHT/2]
ball_vel = [-3,1]


# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [WIDTH/2,HEIGHT/2]
    if direction == "RIGHT":
        ball_vel = [random.randrange(2, 8),-random.randrange(2, 8)]
        #ball_vel = [2,1]
    if direction == "LEFT":
        ball_vel = [-random.randrange(2, 8),-random.randrange(2, 8)]
        #ball_vel = [2,1]

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    spawn_ball("LEFT")

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
 
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    
    #collide and reflect off the wall
    #if ball_pos[0] <= BALL_RADIUS:
        #ball_vel[0] = -ball_vel[0]
    #if ball_pos[0] > WIDTH - BALL_RADIUS:
        #ball_vel[0] = -ball_vel[0]
     
    #Reflecting the ball
    if ball_pos[1] <= BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
    if ball_pos[1] > HEIGHT - BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
    
    #When ball touches gutters spawn ball accordingly
    if ball_pos[0] <= PAD_WIDTH:
        spawn_ball("RIGHT")
    if ball_pos[0] > WIDTH - PAD_WIDTH:
        spawn_ball("LEFT")
        
            
    # draw ball
    canvas.draw_circle(ball_pos,BALL_RADIUS,2,"Red","White")
    
    # update paddle's vertical position, keep paddle on the screen
    if paddle1_pos + paddle1_vel >= 0  and paddle1_pos + paddle1_vel <= HEIGHT - HALF_PAD_HEIGHT :
        paddle1_pos += paddle1_vel
    if paddle2_pos + paddle2_vel >= 0 and paddle2_pos + paddle2_vel < HEIGHT - HALF_PAD_HEIGHT:
        paddle2_pos += paddle2_vel
        
    # draw paddles
    canvas.draw_polygon([(0,paddle1_pos),(0,paddle1_pos+PAD_HEIGHT), (PAD_WIDTH,paddle1_pos+PAD_HEIGHT), (PAD_WIDTH,paddle1_pos)], 8, "Green")
    canvas.draw_polygon([(WIDTH-PAD_WIDTH,paddle2_pos),(WIDTH-PAD_WIDTH,paddle2_pos+PAD_HEIGHT), (WIDTH,paddle2_pos+PAD_HEIGHT), (WIDTH,paddle2_pos)], 8, "Green")
    
    # determine whether paddle and ball collide    
    
    # draw scores
        
def keydown(key):
    global paddle1_vel, paddle2_vel
    
    #to go upwards
    if key == simplegui.KEY_MAP['w']:
        paddle1_vel = paddle1_vel - 1
    #to go downwards
    elif key == simplegui.KEY_MAP['s']:
        paddle1_vel = paddle1_vel + 1 
    elif key == simplegui.KEY_MAP['up']:
        paddle2_vel = paddle2_vel -1 
    elif key == simplegui.KEY_MAP['down']:
        paddle2_vel = paddle2_vel + 1
        
def keyup(key):
    global paddle1_vel, paddle2_vel
    paddle1_vel = 0
    paddle2_vel = 0


# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)


# start frame
new_game()
frame.start()
